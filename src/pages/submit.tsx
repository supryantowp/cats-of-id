/* eslint-disable @next/next/no-img-element */
import React, { useState } from "react";
import ReactMapGL, { Marker } from "react-map-gl";
import Image from "next/image";
import Head from "next/head";
import { supabase } from "@/libs/supabase";
import Notification from "@/components/Notification";
import Navigation from "@/components/Navigation";
import { useRouter } from "next/router";

const Submit = () => {
  const router = useRouter();
  const [uploading, setUploading] = useState(false);
  const [file, setFile] = useState<File>();
  const [previewUrl, setPreviewUrl] = useState(null);
  const [notification, setNotification] = useState({
    type: "success",
    message: "",
    show: false,
  });
  const [form, setForm] = useState({
    name: "",
    sex: "male",
    personality: "",
  });
  const [position, setPosition] = useState({
    longitude: 0,
    latitude: 0,
  });

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    setFile(file);
    const reader = new FileReader();
    reader.onloadend = () => {
      // @ts-ignore
      setPreviewUrl(reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!file) return;

    setUploading(true);
    try {
      const fileName = `${new Date().getTime()}.${file.name.split(".").pop()}`;
      await supabase.storage.from("cats").upload(fileName, file);
      await supabase
        .from("cats")
        .insert({ ...form, ...position, image: fileName });
      setUploading(false);
      showNotification("success", "File uploaded successfully");
    } catch (error) {
      showNotification("error", "Error uploading file");
      setUploading(false);
    }
  };

  const showNotification = (type: string, message: string) => {
    setNotification({ type, message, show: true });
    setTimeout(() => {
      if (type === "success") router.push("/map");
      setNotification({ type: "", message: "", show: false });
    }, 2000);
  };

  return (
    <>
      <Head>
        <title>Cats of Indonesia</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-secondary">
        <Notification notification={notification} />
        <Navigation />
        <div className="mx-auto max-w-3xl py-16 px-6 sm:py-24 lg:px-8">
          <div className="text-center mb-10">
            <p className="mt-1 text-2xl font-bold tracking-tight text-primary lg:text-4xl">
              Submission your Cat
            </p>
          </div>
          <form onSubmit={handleSubmit} className="space-y-8">
            <div className="space-y-8">
              <div className="pt-8">
                <div className="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                  <div className="sm:col-span-12">
                    <label
                      htmlFor="location"
                      className="block text-sm font-medium text-primary"
                    >
                      Location
                    </label>
                    <div className="mt-1">
                      <ReactMapGL
                        initialViewState={{
                          longitude: 116.0,
                          latitude: -0.7893,
                          zoom: 3.5,
                        }}
                        style={{ width: "auto", height: "200px" }}
                        mapStyle="mapbox://styles/supryantowp/cld3ga5kl000101ob6ln1uyqf"
                        mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_TOKEN}
                        onClick={(event) =>
                          setPosition({
                            longitude: event.lngLat.lng,
                            latitude: event.lngLat.lat,
                          })
                        }
                      >
                        <Marker
                          longitude={position.longitude}
                          latitude={position.latitude}
                        >
                          <Image
                            src="/pawprint.png"
                            width="32"
                            height="32"
                            alt="marker"
                          />
                        </Marker>
                      </ReactMapGL>
                    </div>
                  </div>
                  <div className="sm:col-span-2">
                    <label
                      htmlFor="name"
                      className="block text-sm font-medium text-primary"
                    >
                      Name
                    </label>
                    <div className="mt-1">
                      <input
                        type="text"
                        name="name"
                        id="name"
                        autoComplete="off"
                        required
                        className="block w-full rounded-md border-primary shadow-sm focus:border-primary focus:ring-primary sm:text-sm bg-primary/30"
                        onChange={({ target }) =>
                          setForm({ ...form, name: target.value })
                        }
                        value={form.name}
                      />
                    </div>
                  </div>
                  <div className="sm:col-span-2">
                    <label
                      htmlFor="sex"
                      className="block text-sm font-medium text-primary"
                    >
                      Sex
                    </label>
                    <div className="mt-1">
                      <select
                        id="sex"
                        required
                        name="sex"
                        className="block w-full rounded-md border-primary shadow-sm focus:border-primary focus:ring-primary sm:text-sm bg-primary/30"
                        onChange={({ target }) =>
                          setForm({ ...form, sex: target.value })
                        }
                      >
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                      </select>
                    </div>
                  </div>
                  <div className="sm:col-span-2">
                    <label
                      htmlFor="personality"
                      className="block text-sm font-medium text-primary"
                    >
                      Personality
                    </label>
                    <div className="mt-1">
                      <input
                        type="text"
                        required
                        name="personality"
                        id="personality"
                        className="block w-full rounded-md border-primary shadow-sm focus:border-primary focus:ring-primary sm:text-sm bg-primary/30"
                        onChange={({ target }) =>
                          setForm({ ...form, personality: target.value })
                        }
                        value={form.personality}
                      />
                    </div>
                  </div>
                  <div className="sm:col-span-12">
                    <label
                      htmlFor="image"
                      className="block text-sm font-medium text-primary"
                    >
                      Image
                    </label>
                    <div className="mt-1 flex justify-center rounded-md border-2 border-dashed border-primary px-6 pt-5 pb-6">
                      {previewUrl && (
                        <img
                          className="object-cover object-center"
                          src={previewUrl}
                          alt="Preview"
                        />
                      )}
                      {!previewUrl && (
                        <div className="space-y-1 text-center">
                          <svg
                            className="mx-auto h-12 w-12 text-primary"
                            stroke="currentColor"
                            fill="none"
                            viewBox="0 0 48 48"
                            aria-hidden="true"
                          >
                            <path
                              d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                              strokeWidth={2}
                              strokeLinecap="round"
                              strokeLinejoin="round"
                            />
                          </svg>
                          <div className="flex text-sm text-gray-600">
                            <label
                              htmlFor="file-upload"
                              className="relative cursor-pointer rounded-md font-medium text-primary focus-within:outline-none focus-within:ring-2 focus-within:ring-primary focus-within:ring-offset-2 hover:text-primary"
                            >
                              <span>Upload a file</span>
                              <input
                                accept="image/*"
                                onChange={handleImageChange}
                                id="file-upload"
                                name="file-upload"
                                type="file"
                                className="sr-only"
                              />
                            </label>
                            <p className="pl-1">or drag and drop</p>
                          </div>
                          <p className="text-xs text-gray-500">
                            PNG, JPG, GIF up to 10MB
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="pt-5">
              <div className="flex justify-end">
                <button
                  disabled={uploading ? true : false}
                  type="submit"
                  className="ml-3 inline-flex justify-center rounded-md border disabled:bg-primary/50 border-transparent bg-primary py-2 px-4 text-sm font-medium text-secondary shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                >
                  Save
                </button>
              </div>
            </div>
          </form>
        </div>
      </main>
    </>
  );
};

export default Submit;
